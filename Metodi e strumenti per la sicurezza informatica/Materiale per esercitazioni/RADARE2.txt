RADARE2:

radare2 è una repository git tramite la quale è possibile fare reverse engeneering.
Essendo una repository basterà spostarsi dentro la cartella in questione usando:
$ cd radare2
Dopodiché sarà possibile utilizzare tutti i comandi di tale repo.

Rabin2:

Rabin2 è una utility per le stringhe, per conoscere tutte le info relative a tale comando
basterà usare: 
$ man rabin2 

Disassembler:

r2 <nome_eseguibile> oppure se da problemi:
r2 -e 'bin.relocs.apply=true' <nome_eseguibile> --> ci permette di entrare nella modalità indirizzi:

Welcome to radare2!

* Type `?` for the root list of commands. 
* Append the `?` to any command to list the sub-commands.
* Prefix the command with `'` to avoid evaluating special chars
* The `@` modifier can be used for temporal seeks
* The `~` represents the internal grep. System pipes also work `|`.
* Multiple commands can be chained with `;`.
* Run external scripts with the `.` source command (r2, r2js, python, ..) 
* Use the `?*~...` command to inspect all the commands in visual mode

Use the `e` command to change the configuration options.
* Run `edit` to tweak your ~/.radare2rc script

Basic commands:

* s [addr] - seek to a different address
* px, pd  - print hexadecimal, disassembly (pdf/pdr the whole function)
* wx, wa  - write hexpairs, write assembly (w - write string)
* aaa, af - analyze the whole program or function
* /, /x   - search for strings or hexadecimal patterns
* f~...   - search for strings or hexadecimal patterns
* q       - quit (alias for ^D or exit)


pdf ad esempio apre il disassembler, possiamo eseguirlo a partire dal main o da un indirizzo specifico: pdf@main, pdf@sym.nome_funzione

$ fs symbols -> somma di f e s (vedi sopra)

$ radiff2 -A -C <Exectbl_1> <Exectbl_2> -> mostra le differenze tra i due eseguibili, vedi: https://dustri.org/b/defeating-ioli-with-radare2.html

$afl -> mostra l'elenco di tutte le funzioni

